/*
 * Connect 4 assignment
 * Date - 5 Oct 2021
 * Author - Victor Yu
 * Teaher - Mr.Ho
 */

 //These are my imports
import java.util.Scanner;
import java.util.Random;
import java.util.ArrayList;
public class connect4 {
  
  /**
   * Description: This will place the coin at the lowest part of the column choosen possible and check if it is a winning move and end the game if you do a game-winning move
   * @param col This is the column to play the coin
   * @param color This is the color of the coin that is going to be placed
   * @param arr The board
   * @param location An array used to save the loaction of the palced coin used for wincheck
   * @return The returns will end the game if a wincondition is met
   */
  public static String coinPlace(int height, int col, char color, char[][] arr, int[] location){
    for(int i = (arr.length - 1); i >= 0; i--){
      if (Character.compare(arr[i][col], '0') == 0){// This checks if the bottom of the column is empty
        
        //If the location is empty it will place the color in the slot and save the location
        arr[i][col] = color; 
        location[0] = i;
        location[1] = col;
        
        //These are the win condition checkers
        if(winCheckHor(arr, location) || ((i <= 2) && (winCheckVer(arr, location))) || (winCheckLeftDia(arr, location)) || (winCheckRightDia(height, arr, location))){
          return("false");//Ends the game
        }
        return("true");//Ends the loop after it finishes placing the coin
      }
    }
    System.out.println("This column is full try again");//If the column is full it will tell you to choose another one

    return("true");
  }
  
  
  /**
   * Description: Checks the horizonal line from where the coin is placed for four in a row and ends the game
   * @param arr This is the board
   * @param location The saved location of the placed coin
   * @return if the returns is true it will end the game if false it will contine 
   */
  public static boolean winCheckHor(char[][] arr, int[] location){ 
    int x = location[0]; // x value
    int y = location[1]; // y value
    int winCounter = 0; // Counts until it reaches 4 
    char color = arr[x][y];// takes the color of the symbol
    
    //Checks the row that it is on
    for(int i = 0; i < 7; i ++){
      if(Character.compare(arr[x][i], color) == 0){ //compares coin and horizontal 
        winCounter += 1;
        if(winCounter == 4){ // if there is four in the row it will return true and say you win
          return(true);
        }
      }
      else{//if it's not in a row it will break this is the same for all the other win conditions as well
        winCounter = 0; 
      }
    }
    return(false);
  }
  

  /**
   * Description: Checks the three underneath the the placed coin to see if it's 4 in a row
   * @param arr Taking in the board array
   * @param location taking the location of the piece
   * @return will return true for if you win returns false for no win
   */
  public static boolean winCheckVer(char[][] arr, int[] location){
    int x = location[0];
    int y = location[1];
    if(Character.compare(arr[x][y], arr[x+1][y]) == 0 && Character.compare(arr[x][y], arr[x+2][y]) == 0 && Character.compare(arr[x][y], arr[x+3][y]) == 0){ //C
      return(true);
    }
    return(false);
    
  }
  
  public static boolean winCheckLeftDia(char[][] arr, int[] location){
    int x = location[0]; // x value
    int y = location[1]; // y value
    int winCounter = 0; // Counts until it reaches 4 
    char color = arr[x][y];// takes the color of the symbol
    while(x > 0 & y > 0){
      x--;
      y--;
    }
    while(x <= 5 & y <= 6){
      if(Character.compare(arr[x][y], color) == 0){
        winCounter += 1;
        if(winCounter == 4){
          return(true);
        }
      }
      else winCounter = 0;
      x++;
      y++;
    }
    
    return(false);
  }
  public static boolean winCheckRightDia(int height, char[][] arr, int[] location){
    int x = location[0]; // x value
    int y = location[1]; // y value
    int winCounter = 0; // Counts until it reaches 4 
    char color = arr[x][y];// takes the color of the symbol
    while((x > 0 & y < height)){
      x--;
      y++;
    }
    while(x <= 5 & y >= 0){
      if(Character.compare(arr[x][y], color) == 0){
        winCounter += 1;
        if(winCounter == 4){
          return(true);
        }
      }
      else{
        winCounter = 0;}
      x++;
      y--;
    }
    return(false); 
  }
  
  /**
   * Description: Fills the board with a char Nested loop that valorizes the indexes
   * @param arr is the array
   */
  public static void setArray(char[][] arr) {
    for (int i = 0; i < arr.length; i++) {
      for (int j = 0; j < arr[0].length; j++) {
        arr[i][j] = '0';
      }
    }
  }
  
  
  /**
   * Description: Prints out the board with lines in-between 
   * Two loops to cycle through the entire array
   * @param arr is the array
   */
  public static void printArray(char[][] arr) {
    for (int i = 0; i < arr.length; i++) {
      System.out.print("| ");
      
      for (int j = 0; j < arr[0].length; j++) {
        System.out.print(arr[i][j] + " | ");
      }
      
      System.out.println();
    }
    System.out.println("¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
  }
  
  
  /**
   * Description: Asks and chooses gamemode for the game
   * @param reader is the Scanner
   */
  public static boolean gamemodeSelection(Scanner reader) {
    Boolean stillChoosing = true; //Keeps asking for gamemode till player gives vaild response
    
    while (stillChoosing){
      System.out.println("Do you want to play PvP or PvC"); //asks for what you want to play
      String choice = reader.nextLine().toLowerCase();
      
      if (choice.equals("pvp")) { //if it's either PvP or PvC it will return and end the method so you don't need to change the boolean 
        System.out.println("You have choosen PvP..." + "\n" + "Player One Starting Now" + "\n");
        return (false);
        
      } else if (choice.equals("pvc")) {
        System.out.println("You have choosen PvC..." + "\n" + "Player One Starting Now" + "\n");
        //this is where we will make the ai for the connect 4 game
        return (true);
      } else {
        System.out.println("Try again...");
      }
    }
    return (false);
  }
  
  
  /**
   * Description: Asks what column you want to put the coin in. Tells you to resubmit your answer if it's not in the range of 1-7 rep the columns
   * @param reader Takes in the reader so that you can take inputs from console
   * @param width takes the width of the board
   * @return the number of the column subtracted by one so that it works as index for the board
   */
  public static int playerMove(Scanner reader, int width) {// selection for the coin placement
    int moveSelect;
    
    do {
      System.out.println("What column do you want to place in? (int)"); 
      moveSelect = reader.nextInt() - 1;
      
      if(moveSelect < 0  || moveSelect >= width){
        System.out.println("haha good try \nPlease choose a number from 1-7");
      }
      
    }while(moveSelect < 0  || moveSelect >= width);
    return moveSelect;
  }
  

  /**
   * Description: computers turn does everything concering the selection process  
   * @param playerColor takes in the color of the coin
   * @param board takes in the board
   * @param location coords of coin placed
   * @return will either return the winning mvoe or it will return a random value
   */
  public static int aiMove(int height, char playerColor, char[][] board, int[] location){
    Random rand = new Random();
    ArrayList<Integer> aiDoNot = new ArrayList<Integer>(); // Create an ArrayList object because we need it for ai moves and to use contains()
    int aiChoice;
    aiDoNot.clear();

    System.out.println("Computer Move");
    for(int i = 1; i < 7; i++){ // cycles through and looks for a winning play
      if(coinPlace(height, i, playerColor, board, location).equals("false")){// if it is a winning play it will return the spot
        removeCoin(board, location);
        return i;
      }
      removeCoin(board, location);
    }
    //Check for the enemy win and if it finds
    playerColor = colorSwitch(playerColor);
    for(int i = 1; i < 7; i++){
      if(coinPlace(height, i, playerColor, board, location).equals("false")){// if it is enemy win it will place it return the spot
        removeCoin(board, location);
        return i;
      }
      removeCoin(board, location);
    }

    for(int i = 1; i < 7; i++){//checks if the next move that it makes is going to let the opponet win off them
      if(!coinPlace(height, i, playerColor, board, location).equals("tryagain")){//makes sure not to run when it's a invalide spot
        if(location[0] != 0){
          if(coinPlace(height, i, playerColor, board, location).equals("false")){
            aiDoNot.add(i);
          }

          removeCoin(board, location);//removes the placed coins that were used for checking
          location[0] = location[0] + 1;
          removeCoin(board, location);
        }
        else{
          removeCoin(board, location);
        }
      }
    }
    
    do{
      aiChoice = rand.nextInt(7);//generate random int that is not a lose situtation
    }while(aiDoNot.contains(aiChoice));
    return aiChoice;
  }




  /**
   * Description: This will remove the last placed coin useful for win checks
   * @param board this takes in the board
   * @param location this takes the loaction of last placed coin
   */
  public static void removeCoin(char[][] board, int[] location){
    board[location[0]][location[1]] = '0'; 
  }



  /**
   * Description: Takes in the color and then it changes it to the other color
   * @param color takes in the current color
   * @return the changed color
   */
  public static char colorSwitch(char color){
    if(color == 'R'){
      return 'Y';
    }
    if(color == 'Y'){
      return 'R';
    }
    return color;
  }
  
  
  public static void main(String[] args) {
    
    // Setting up things 
    int height = 6;
    int length = 7;
    char[][] gridArray = new char[height][length]; // This is the array that represents the layout of the game
    int[] locationSave = new int[2];
    Scanner reader = new Scanner(System.in); //Creates the Scanner
    char playerColor = 'R';
    boolean gamemode;
    String running = "true";
    int player = 1; // 1 represents a player/On | 0 represents ai/Off
    
    
    gamemode = gamemodeSelection(reader); //returns false for PvP and true PvC
    setArray(gridArray);
    colorSwitch(playerColor);
    printArray(gridArray);
    
    while(running.equals("true")){
      if (player == 1) { // This is the player move
        //Player move
        
        do{
        System.out.println(playerColor + " Move");
        running = coinPlace(height, playerMove(reader, length), playerColor, gridArray, locationSave);
        System.out.println(locationSave[0]);
        }while(running.equals("try again"));
        printArray(gridArray);
        if (gamemode) {//If gamemode is true it will go 
          player = 0;         
          playerColor = 'Y';
        }
        playerColor = colorSwitch(playerColor);
      }
      else { // Ai

        
        playerColor = colorSwitch(playerColor);
        do{
        running = coinPlace(height, aiMove(height, playerColor, gridArray, locationSave), playerColor, gridArray, locationSave);
        }while(running.equals("try again"));
        printArray(gridArray);
        playerColor = colorSwitch(playerColor);
        player = 1;
      }      
    }
    playerColor = colorSwitch(playerColor);
    printArray(gridArray);
    System.out.println(playerColor + " wins the game");
    reader.close();
  }
}
